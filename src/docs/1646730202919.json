{
  "value": {
    "id": "1646730202919",
    "title": "JS事件循环",
    "content": "## 事件循环\nJS 语言的一大特点就是单线程，也就是说，同一时间只能做一件事。\n\n为了协调事件、用户交互、脚本、UI渲染和网络处理等行为，防止主线程阻塞，Event Loop的方案应运而生。\n\nEvent Loop中，每一次循环成为tick，每一次tick的任务如下：\n* 执行栈选择最优先进入队列的宏任务（一般都是script），执行其同步代码直至结束；\n* 检查是否有微任务，有则会执行微任务队列，直至微任务队列为空；\n* 渲染页面（如果宿主为浏览器）\n* 开始下一轮tick，执行宏任务中的异步代码（setTimeout等回调）\n\n\n## 任务队列\n事件循环通过任务队列的机制来协调，一个事件循环中可以有一个或多个任务队列，一个任务队列便是一系列有序任务的集合。\n\nJS分为同步任务和异步任务，同步任务都在主线程上执行，形成一个执行栈。\n\n主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。\n\n一旦执行栈中的所有同步任务执行完毕，系统就会读取任务队列，将可运行的异步任务添加到执行栈中开始执行。\n\n## 宏任务\n>宏任务由宿主发起，而微任务由javascript自身发起。\n\n执行栈每次执行的代码就是一个宏任务。\n\n宏任务包含以下方式创建的任务：\n* script整体代码\n* setInterval\n* setTimeout\n* I/O\n* UI交互事件\n* postMessage\n* MessageChannel\n* setImmediate\n\n浏览器为了能够使JS任务和DOM渲染有序进行，会在一个任务执行完成后，下一个任务执行开始前，对页面进行重新渲染：\n```\n宏任务 -> 渲染 -> 宏任务 -> ...\n```\n\n## 微任务\n微任务是指当前task执行完成后，DOM渲染之前，立即执行的任务。\n\n微任务包含：\n* Promise.then\n* Object.observe\n* MutationObserver\n* process.nextTick",
    "topic": "",
    "keywords": [
      "javascript",
      "Event Loop",
      "事件循环",
      "宏任务",
      "微任务"
    ]
  }
}