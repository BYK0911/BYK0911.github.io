{
  "value": {
    "id": "1645433358746",
    "title": "Canvas 绘制路径",
    "content": "# Canvas 路径\n上一节中我们学习了绘制矩形、文字、图片的方法，接下我们将学习另一类更强大的工具—— 路径（Path）。\n\n不管是画直线、曲线、圆弧，甚至是更复杂的几何图形，我们都称之为路径的绘制。\n\n接下来我们将学习使用路径 api 来画出我们想要的形状，并对其进行描边或填充。\n\n## 开始和结束路径\nbeginPath 和 closePath，这是两个成对出现的api，在开始绘制路径之前调用beginPath，路径绘制完成后调用 closePath 闭合路径。\n```\n// 开始路径绘制\nctx.beginPath();\n// 绘制路径\n... \n// 闭合路径\nctx.closePath();\n```\n\n## 绘制直线\n通过以下步骤，我们可以画一条从（10，10）到（100，10）的水平直线。\n```\n// 开始路径\nctx.beginPath();\n// 将画笔移动到指定坐标\nctx.moveTo(10, 10)；\n// 连接到指定坐标\nctx.lineTo(100, 10);\n// 结束路径\nctx.closePath();\n// 描边路径\nctx.stroke();\n```\n结合上一节所学的线型的设置，我们则可以绘制出任意样式的直线。\n\n如果多次调用lineTO连接更多的点，则可以绘制任意形状的折线或几何图形。\n```\n// 绘制一个蓝色三角形\nctx.fillStyle = 'blue';\nctx.beginPath();\nctx.moveTo(50, 0)；\nctx.lineTo(0, 100);\nctx.lineTo(0, 100);\nctx.closePath();\nctx.stroke();\n// 填充路径\nctx.fill();\n```\n\n## 绘制圆弧\n绘制圆弧有以下两种场景：\n* 已知圆心和半径画圆或圆弧\n* 已知两条相交的线画圆角\n### 绘制圆或圆弧\n```\n/**\n * arc\n * @param{Number} x 横坐标\n * @param{Number} y 纵坐标\n * @param{Number} r 半径\n * @param{Number} startAngle 起始角度\n * @param{Number} endAngle 结束角度\n * @param{Number} antiClockWise 是否是逆时针\n\n// 在（50，50）位置画一个半径为10的圆，颜色为蓝色\nctx.beginPath();\nctx.arc(50, 50, 10, 0, Math.PI * 2);\nctx.closePath();\nctx.fillStyle = 'blue';\nctx.fill();\n\n// 改变起始角度和结束角度来绘制圆弧\nctx.beginPath();\nctx.arc(50, 50, 10, -Math.PI, 0);\nctx.strokeStyle = 'red';\nctx.stroke();\nctx.closePath();\n```\n\n### 绘制圆角\n```\n/**\n * arcTo\n * @param{Number} x1 横坐标\n * @param{Number} y1 纵坐标\n * @param{Number} x2 横坐标\n * @param{Number} y2 纵坐标\n * @param{Number} r 半径\n\n// 在（10，10）,（100，10）,（100，100）三个点构成的角上，用半径为10的圆弧来过渡。\nctx.beginPath();\nctx.moveTo(10, 10);\nctx.arcTo(100, 10, 100, 100, 10);\nctx.strokeStyle = 'black';\nctx.stroke();\nctx.closePath();\n```\n## 绘制曲线\n在几何的世界里，除了棱角分明的直线构成的几何体，还有由平滑的曲线构成的几何体。canvas提供了两种绘制曲线的方式：\n* qudraticCurveTo 一次贝塞尔曲线\n* besizerCurveTo 二次贝塞尔曲线\n### 一次贝塞尔曲线\n一次贝塞尔曲线是用一个控制点将两个点用平滑的曲线连接起来\n```\n/**\n * qudraticCurveTo\n * @param{Number} cx1 控制点1横坐标\n * @param{Number} cy1 控制点1纵坐标\n * @param{Number} x2 横坐标\n * @param{Number} y2 纵坐标\n\n// 通过控制点（50，50）将（10，10）（100，10）用平滑的曲线连接起来\nctx.beginPath();\nctx.moveTo(10, 10);\nctx.besizerCurveTo(50, 50, 100, 50);\nctx.strokeStyle = 'black';\nctx.stroke();\nctx.closePath();\n```\n\n### 二次贝塞尔曲线\n一次贝塞尔曲线则是用两个控制点将两个点用平滑的曲线连接起来\n```\n/**\n * besizerCurveTo\n * @param{Number} cx1 控制点1横坐标\n * @param{Number} cy1 控制点1纵坐标\n * @param{Number} cx2 控制点2横坐标\n * @param{Number} cy2 控制点2纵坐标\n * @param{Number} x2 横坐标\n * @param{Number} y2 纵坐标\n\n// 通过控制点（50，50）（100，50）将（10，10）（150，10）用平滑的曲线连接起来\nctx.beginPath();\nctx.moveTo(10, 10);\nctx.besizerCurveTo(50, 50, 100, 50, 150, 10);\nctx.strokeStyle = 'black';\nctx.stroke();\nctx.closePath();\n```\n## 路径剪切\n当你想在某个范围内绘制图形的时候，我们需要先绘制出这个范围的路径，然后剪切路径，就可以在路径范围内绘制图形，超出的部分自动就不再显示了\n```\n// 在一个以（50，50）为圆心，50为半径的圆形内，在（0，0）位置画一张100*100的图\nctx.beginPath();\nctx.arc(50, 50, 50, 0, Math.PI);\nctx.closePath();\nctx.clip()\nctx.drawImage(img, 0, 0, 100, 100);\n```",
    "topic": "Canvas 绘图",
    "keywords": [
      "canvas",
      "js"
    ]
  }
}